// This file is generated by scripts/codegen.ts
// Do not edit this file directly

import { definitions } from './node-defs';
import type { Node, NodeTypes } from './node-types';

export const isNum = (node: Node): node is NodeTypes['Num'] => node.type === 'Number';
export const isIdentifier = (node: Node): node is NodeTypes['Identifier'] => node.type === 'Identifier';
export const isFunc = (node: Node): node is NodeTypes['Func'] => node.type === 'Func';
export const isAdd = (node: Node): node is NodeTypes['Add'] => node.type === 'Add';
export const isMul = (node: Node): node is NodeTypes['Mul'] => node.type === 'Mul';
export const isPlusMinus = (node: Node): node is NodeTypes['PlusMinus'] => node.type === 'PlusMinus';
export const isMinusPlus = (node: Node): node is NodeTypes['MinusPlus'] => node.type === 'MinusPlus';
export const isDiv = (node: Node): node is NodeTypes['Div'] => node.type === 'Div';
export const isMod = (node: Node): node is NodeTypes['Mod'] => node.type === 'Modulo';
export const isPow = (node: Node): node is NodeTypes['Pow'] => node.type === 'Power';
export const isRoot = (node: Node): node is NodeTypes['Root'] => node.type === 'Root';
export const isAbs = (node: Node): node is NodeTypes['Abs'] => node.type === 'AbsoluteValue';
export const isNeg = (node: Node): node is NodeTypes['Neg'] => node.type === 'Neg';
export const isSin = (node: Node): node is NodeTypes['Sin'] => node.type === 'Sin';
export const isCos = (node: Node): node is NodeTypes['Cos'] => node.type === 'Cos';
export const isTan = (node: Node): node is NodeTypes['Tan'] => node.type === 'Tan';
export const isCot = (node: Node): node is NodeTypes['Cot'] => node.type === 'Cot';
export const isSec = (node: Node): node is NodeTypes['Sec'] => node.type === 'Sec';
export const isCsc = (node: Node): node is NodeTypes['Csc'] => node.type === 'Csc';
export const isArcSin = (node: Node): node is NodeTypes['ArcSin'] => node.type === 'ArcSin';
export const isArcCos = (node: Node): node is NodeTypes['ArcCos'] => node.type === 'ArcCos';
export const isArcTan = (node: Node): node is NodeTypes['ArcTan'] => node.type === 'ArcTan';
export const isArcCot = (node: Node): node is NodeTypes['ArcCot'] => node.type === 'ArcCot';
export const isArcSec = (node: Node): node is NodeTypes['ArcSec'] => node.type === 'ArcSec';
export const isArcCsc = (node: Node): node is NodeTypes['ArcCsc'] => node.type === 'ArcCsc';
export const isLog = (node: Node): node is NodeTypes['Log'] => node.type === 'Log';
export const isLn = (node: Node): node is NodeTypes['Ln'] => node.type === 'Ln';
export const isExp = (node: Node): node is NodeTypes['Exp'] => node.type === 'Exp';
export const isGt = (node: Node): node is NodeTypes['Gt'] => node.type === 'GreaterThan';
export const isGte = (node: Node): node is NodeTypes['Gte'] => node.type === 'GreaterThanOrEquals';
export const isLt = (node: Node): node is NodeTypes['Lt'] => node.type === 'LessThan';
export const isLte = (node: Node): node is NodeTypes['Lte'] => node.type === 'LessThanOrEquals';
export const isInfinity = (node: Node): node is NodeTypes['Infinity'] => node.type === 'Infinity';
export const isPi = (node: Node): node is NodeTypes['Pi'] => node.type === 'Pi';
export const isE = (node: Node): node is NodeTypes['E'] => node.type === 'E';
export const isAnd = (node: Node): node is NodeTypes['And'] => node.type === 'LogicalAnd';
export const isOr = (node: Node): node is NodeTypes['Or'] => node.type === 'LogicalOr';
export const isXor = (node: Node): node is NodeTypes['Xor'] => node.type === 'ExclusiveOr';
export const isNot = (node: Node): node is NodeTypes['Not'] => node.type === 'LogicalNot';
export const isImplies = (node: Node): node is NodeTypes['Implies'] => node.type === 'Conditional';
export const isEquivalent = (node: Node): node is NodeTypes['Equivalent'] => node.type === 'Biconditional';
export const isTrue = (node: Node): node is NodeTypes['True'] => node.type === 'True';
export const isFalse = (node: Node): node is NodeTypes['False'] => node.type === 'False';
export const isSet = (node: Node): node is NodeTypes['Set'] => node.type === 'Set';
export const isUnion = (node: Node): node is NodeTypes['Union'] => node.type === 'SetDifference';
export const isIntersect = (node: Node): node is NodeTypes['Intersect'] => node.type === 'SetIntersection';
export const isCartesianProduct = (node: Node): node is NodeTypes['CartesianProduct'] => node.type === 'CartesianProduct';
export const isSetDiff = (node: Node): node is NodeTypes['SetDiff'] => node.type === 'SetDiff';
export const isSubset = (node: Node): node is NodeTypes['Subset'] => node.type === 'Subset';
export const isProperSubset = (node: Node): node is NodeTypes['ProperSubset'] => node.type === 'ProperSubset';
export const isSuperset = (node: Node): node is NodeTypes['Superset'] => node.type === 'Superset';
export const isProperSuperset = (node: Node): node is NodeTypes['ProperSuperset'] => node.type === 'ProperSuperset';
export const isNotSubset = (node: Node): node is NodeTypes['NotSubset'] => node.type === 'NotSubset';
export const isNotProperSubset = (node: Node): node is NodeTypes['NotProperSubset'] => node.type === 'NotProperSubset';
export const isNotSuperset = (node: Node): node is NodeTypes['NotSuperset'] => node.type === 'NotSuperset';
export const isNotProperSuperset = (node: Node): node is NodeTypes['NotProperSuperset'] => node.type === 'NotProperSuperset';
export const isIn = (node: Node): node is NodeTypes['In'] => node.type === 'ElementOf';
export const isNotIn = (node: Node): node is NodeTypes['NotIn'] => node.type === 'NotElementOf';
export const isEmptySet = (node: Node): node is NodeTypes['EmptySet'] => node.type === 'EmptySet';
export const isNaturals = (node: Node): node is NodeTypes['Naturals'] => node.type === 'Naturals';
export const isIntegers = (node: Node): node is NodeTypes['Integers'] => node.type === 'Integers';
export const isRationals = (node: Node): node is NodeTypes['Rationals'] => node.type === 'Rationals';
export const isReals = (node: Node): node is NodeTypes['Reals'] => node.type === 'Reals';
export const isComplexes = (node: Node): node is NodeTypes['Complexes'] => node.type === 'Complexes';
export const isMatrix = (node: Node): node is NodeTypes['Matrix'] => node.type === 'Matrix';
export const isVector = (node: Node): node is NodeTypes['Vector'] => node.type === 'Vector';
export const isDeterminant = (node: Node): node is NodeTypes['Determinant'] => node.type === 'Determinant';
export const isTranspose = (node: Node): node is NodeTypes['Transpose'] => node.type === 'Transpose';
export const isVectorProduct = (node: Node): node is NodeTypes['VectorProduct'] => node.type === 'VectorProduct';
export const isScalarProduct = (node: Node): node is NodeTypes['ScalarProduct'] => node.type === 'ScalarProduct';
export const isLimit = (node: Node): node is NodeTypes['Limit'] => node.type === 'Limit';
export const isInt = (node: Node): node is NodeTypes['Int'] => node.type === 'Int';
export const isDefInt = (node: Node): node is NodeTypes['DefInt'] => node.type === 'DefInt';
export const isSum = (node: Node): node is NodeTypes['Sum'] => node.type === 'Sum';
export const isProd = (node: Node): node is NodeTypes['Prod'] => node.type === 'Prod';
export const isEq = (node: Node): node is NodeTypes['Eq'] => node.type === 'Equals';
export const isNeq = (node: Node): node is NodeTypes['Neq'] => node.type === 'NotEquals';
export const isParens = (node: Node): node is NodeTypes['Parens'] => node.type === 'Parens';

export const isRelational = (node: Node): node is NodeTypes[keyof NodeTypes] => definitions[node.type]?.kind === "relation";
export const isConstant = (node: Node): node is NodeTypes[keyof NodeTypes] => definitions[node.type]?.kind === "constant";
